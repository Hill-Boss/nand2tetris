// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    // AC 1 1 a C1 C2 C3 C4 C5 C6 d1 d2 d3 j1 j2 j3
    // !I[15] if A instruction => = 1

    PARTS:

    Not(in = instruction[15], out = ACinst);
    Or(a = ACinst, b = instruction[5], out = ALoad);
    Mux16(a = ALUOUT, b = instruction, sel = ACinst, out = ARegIN);
    ARegister(in = ARegIN, load = ALoad, out = ARegOUT, out[0..14] = addressM);

    And(a = instruction[15], b = instruction[12], out = ALUMUXC);
    Mux16(a = ARegOUT, b = inM, sel = ALUMUXC, out = ALUIN);

    And(a = instruction[15], b = instruction[4], out = DLoad);
    DRegister(in = ALUOUT, load = DLoad, out = DRegOUT);

    And(a = instruction[15], b = instruction[11], out = ALUZx);
    And(a = instruction[15], b = instruction[10], out = ALUNx);
    And(a = instruction[15], b = instruction[9], out = ALUZy);
    And(a = instruction[15], b = instruction[8], out = ALUNy);
    And(a = instruction[15], b = instruction[7], out = ALUf);
    And(a = instruction[15], b = instruction[6], out = ALUno);
    ALU(x = DRegOUT, y = ALUIN, zx = ALUZx, nx = ALUNx, zy = ALUZy, ny = ALUNy, f = ALUf, no = ALUno, out = outM, out = ALUOUT, zr = ALUZr, ng = ALUNg);

    And(a = instruction[15], b = instruction[3], out = writeM);

    Not(in = ALUNg, out = NOTNg);
    Not(in = ALUZr, out = NOTZr);
    And(a = NOTNg, b = NOTZr, out = Positive);
    And(a = instruction[1], b = ALUZr, out = JEQ);
    And(a = instruction[2], b = ALUNg, out = JLT);
    And(a = instruction[0], b = Positive, out = JGT);
    Or(a = JEQ, b = JLT, out = JLE);
    Or(a = JLE, b = JGT, out = JumpToA);
    And(a = instruction[15], b = JumpToA, out = PCLoad);
    PC(in = ARegOUT, load = PCLoad, inc = true, reset = reset, out[0..14] = pc);

}
